Description: Handle possible X error when creating OpenGL context
 Without this higan just crashes when the driver does
 not support OpenGL 3.2 and context creation fails. 
Author: Tobias Hansen <thansen@debian.org>

Index: higan-098/ruby/video/glx.cpp
===================================================================
--- higan-098.orig/ruby/video/glx.cpp	2016-05-26 18:48:04.491287258 +0200
+++ higan-098/ruby/video/glx.cpp	2016-05-26 18:56:26.391451281 +0200
@@ -1,8 +1,16 @@
 #include "opengl/opengl.hpp"
+#include "emulator/emulator.hpp"
 
 #define GLX_CONTEXT_MAJOR_VERSION_ARB 0x2091
 #define GLX_CONTEXT_MINOR_VERSION_ARB 0x2092
 
+static bool ctxErrorOccurred = false;
+static int ctxErrorHandler( Display *dpy, XErrorEvent *ev )
+{
+    ctxErrorOccurred = true;
+    return 0;
+}
+
 auto VideoGLX_X11ErrorHandler(Display*, XErrorEvent*) -> int {
   return 0;  //suppress errors
 }
@@ -177,6 +185,10 @@
       XNextEvent(display, &event);
     }
 
+    // Install X error handler to prevent a crash in case context creation fails.
+    ctxErrorOccurred = false;
+    int (*oldHandler)(Display*, XErrorEvent*) = XSetErrorHandler(&ctxErrorHandler);
+
     glxcontext = glXCreateContext(display, vi, /* sharelist = */ 0, /* direct = */ GL_TRUE);
     glXMakeCurrent(display, glxwindow = xwindow, glxcontext);
 
@@ -196,10 +208,11 @@
       //glXCreateContextAttribs tends to throw BadRequest errors instead of simply failing gracefully
       auto originalHandler = XSetErrorHandler(VideoGLX_X11ErrorHandler);
       auto context = glXCreateContextAttribs(display, fbConfig[0], nullptr, true, attributes);
+      // Sync to ensure any errors generated are processed.
       XSync(display, False);
       XSetErrorHandler(originalHandler);
 
-      if(context) {
+      if ( !ctxErrorOccurred && context ) {
         glXMakeCurrent(display, 0, nullptr);
         glXDestroyContext(display, glxcontext);
         glXMakeCurrent(display, glxwindow, glxcontext = context);
@@ -212,6 +225,10 @@
       return false;
     }
 
+    XSync( display, False );
+    // Restore the original error handler.
+    XSetErrorHandler( oldHandler );
+
     if(glXSwapInterval) glXSwapInterval(settings.synchronize);
 
     //read attributes of frame buffer for later use, as requested attributes from above are not always granted
